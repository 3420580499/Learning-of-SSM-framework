<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        声明student对象
        注入:就是赋值的意思
        简单类型:spring中规定java的基本数据类型和string都是简单类型(包装类也是简单类型)
        di:给属性赋值
        1.set注入(设值注入):spring调用类的set方法,你可以在set方法中完成属性的赋值
           1)简单类型的set注入
               <bean id="xxx" class="yyy">
                   <property name="属性名字" value="此属性的值" />
                   一个property只能给一个属性赋值
                   <property ......./>
               </bean>
           2)引用类型的set注入:spring中调用类的set方法
               <bean id="xxx" class="yyy">
                   <property name="属性名称" ref="bean的id(对象的名称)" />
               </bean>
    -->

    <bean id="myStudent" class="com.good.entity.Student">
        <property name="name" value="牛顿" />
        <property name="age" value="28" />
        <!--引用数据类型-->
        <property name="school" ref="mySchool"/>
    </bean>
    <bean id="mySchool" class="com.good.entity.School">
        <property name="schoolName" value="剑桥大学" />
        <property name="address" value="英国剑桥" />
    </bean>


    <!--
       2.构造注入:spring调用类有参构造方法,在创建对象的同时,在构造方法中对属性赋值
         构造注入使用 <constructor-arg>标签
         <constructor-arg>标签:一个<constructor-arg>表示构造方法的一个参数
         <constructor-arg>标签属性:
              name:表示构造方法的形参名
              index:表示构造方法的参数位置,参数从左往右位置是0,1,2的顺序
              value:构造方法的形参类型是简单类型的,使用value
              ref:构造方法的形参类型是引用类型的,使用ref
    -->
    <bean id="myStudentTwo" class="com.good.entity.Student">
        <constructor-arg name="name" value="比尔盖茨"/>
        <constructor-arg name="age" value="23"/>
        <constructor-arg name="school" ref="mySchoolTwo"/>
    </bean>
    <bean id="mySchoolTwo" class="com.good.entity.School">
        <constructor-arg name="schoolName" value="哈佛大学"/>
        <constructor-arg name="address" value="美国"/>
    </bean>




    <!--使用index属性-->
    <bean id="myStudentThree" class="com.good.entity.Student">
        <!--写了index顺序可以换-->
        <!--可以省略index,但顺序不能写错-->
        <constructor-arg index="0" value="华盛顿"/>
        <constructor-arg index="1" value="25"/>
        <constructor-arg index="2" ref="mySchoolThree"/>
    </bean>
    <bean id="mySchoolThree" class="com.good.entity.School">
        <constructor-arg index="0" value="华盛顿大学"/>
        <constructor-arg index="1" value="美国"/>
    </bean>


    <!--创建File使用构造注入-->
    <bean id="myFile" class="java.io.File">
        <constructor-arg name = "parent" value="D:\maven\java-hello-spring"/>
        <constructor-arg name = "child" value="springstep.txt"/>
    </bean>




    <!--
        引用类型的自动注入:spring框架根据某些规则可以给引用类型赋值,不用你在给引用类型赋值了,使用的规则常用的byName,byTape
        1.byName(按名称注入):Java类中引用类型的属性名和spring容器中(配置文件)<bean>的id名称一样(private School school中的school与bean中id一致),
                           且数据类型是一致的,这样的容器中的bean,spring能够赋值给引用类型
               语法:<bean id="xx" class="yy" autowire="byName">
                      简单类型属性
                   </bean>
        2.byType(按类型注入):java类中引用类型的数据类型和spring容器中(配置文件)<bean>的class属性是同源关系的,
                           这样的bean能够赋值给引用类型
           同源就是一类的意思:
               1.java类中引用类型的数据类型和bean的class的值是一样的
               1.java类中引用类型的数据类型和bean的class的值父子类关系的
               1.java类中引用类型的数据类型和bean的class的值接口和实现类关系的
           语法:<bean id="xx" class="yy" autowire="byTape">
                      简单类型属性
                   </bean>
        注意:在byType中,在配置文件中声明bean只能有一个符合条件的,
             多于一个是错误的
    -->
    <!--使用byName-->
    <bean id="myStudentFour" class="com.good.entity.Student" autowire="byName">
        <!--此处如果使用传参的方式来写会报错-->
        <property name="name" value="未知" />
        <property name="age" value="28" />
        <!--引用类型-->
        <!--<property name="school" ref="mySchoolTwo"/>-->
    </bean>
    <bean id="school" class="com.good.entity.School">
        <constructor-arg name="schoolName" value="东京大学"/>
        <constructor-arg name="address" value="日本"/>
    </bean>
    <!--使用byType(下面这样写会报错,因为此配置文件有5个class属性为Student的(此bean标签不具有唯一性))-->
   <!-- <bean id="myStudentFive" class="com.good.entity.Student" autowire="byType">-->
       <!--此处如果使用传参的方式来写会报错-->
      <!-- <property name="name" value="未知" />
       <property name="age" value="28" />-->
        <!--引用数据类型-->
       <!--<property name="school" ref="mySchoolTwo"/>-->
   <!--</bean>-->
    <bean id="mySchoolFive" class="com.good.entity.School">
        <constructor-arg name="schoolName" value="清华大学"/>
        <constructor-arg name="address" value="中国"/>
    </bean>
</beans>
