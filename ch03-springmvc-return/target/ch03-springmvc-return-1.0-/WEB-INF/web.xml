<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明,注册springmvc的核心对象DispatcherServlet
        需要在Tomc服务器启动后,创建DispatcherServlet对象的实例
        为什么要创建DispatcherServlet对象的实例呢?
        因为DispatcherServlet在它创建过程中,会同时创建springmvc容器对象
        读取springmvc的配置文件,把这个配置文件中的对象都创建好,当用户发起请求是
        就可以直接使用对象了.

        servlet的初始化会执行init()方法,DispatcherServlet在init()中{
            //创建容器,读取配置文件
            WebApplicationContext ctx= new ClassPathApplicationContext("springmvc.xml");
            //把容器对象放入到ServletContext中
            getServletContext().setAttribute("key",ctx);
        }
     -->

    <!--启动Tomcat报错,读取这个文件/WEB-INF/springmvc.xml(/WEB-INF/dispatcherServlet-servlet.xml)
        springmvc创建容器对象时,读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--自定义springmvc读取配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的位置属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--在Tomcat启动后,创建servlet对象
            load-on-startup:表示Tomcat启动后创建对象的顺序,他的值整数,值越小,Tomcat创建对象的时间就越早,大于等于0的整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--使用框架的时候,url-pattern可以使用两种值
            1.使用扩展名的方式:语法*.xxx,xxx是自定义的扩展名.常用的方式:*.do,*.action,*.mvc等.
            http://localhost:8081/myweb/some.do
            http://localhost:8081/myweb/other.do
            2.使用斜杆的方式("/")
              在你的项目中使用 / ,他会代替Tomcat中的default(conf目录下web.xml文件中定义的处理静态资源文件的servlet)
              导致所有的静态资源都给DispatcherServlet(中央调度去)默认情况下DispatcherServlet没有处理静态资源的能力
              没有控制器对象能处理静态资源的访问,所有静态资源(html,js,图片,css)都是404

              动态资源doing.do是可以访问的,因为我们的程序中有MyController控制器对象,所以可以处理doing,do请求
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!--
        在提交请求参数是,get请求方式中文没有乱码
        使用post方式提交请求,中文会有乱码,需要使用过滤器处理乱码
    -->
    <!-- 编码过滤器 -->
    <!--注册声明过滤器,解决乱码的问题-->
    <filter>
        <filter-name>SpringFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制请求对象(HttpServletResponse)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>SpringFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>