<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">



    <!--让spring知道jdbc.properties文件的位置-->
    <context:property-placeholder location="classpath:jdbc.properties"/>




    <!--声明数据源DataSource,用来连接数据库-->
    <!--阿里的连接池-->
     <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
           init-method="init" destroy-method="close">
         <!--set注入给DruidDataSource提供数据库连接信息-->
         <property name="url" value="${jdbc.url}"/><!--setUrl()-->
         <property name="username" value="${jdbc.username}"/>
         <property name="password" value="${jdbc.password}"/>
         <property name="maxActive" value="${max}"/>
     </bean>



    <!--用来声明mybatis提供的SqlSessionFactoryBean类的,此类内部用来创建SqlSessionFactory-->
    <!--来源于mybatis整合spring的jar包中-->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <!--set注入,将数据库连接池赋给了dataSource属性-->
         <property name="dataSource" ref="myDataSource"/>
         <!--
           mybatis主配置文件的位置
           configLocation属性是Resource类型,用来读取配置文件
           它的赋值使用value,指定文件的路径,使用classpath,表示文件的位置
         -->
         //spring文件中要指定其他文件的位置要使用classpath

         <property name="configLocation" value="classpath:mybatis.xml"/>
     </bean>



    <!--创建dao对象,使用SqlSession的getMapper(Student.class)
        MapperScannerConfigurer:在内部调用getMapper()生成每一个dao接口的代理对象(如:此处会生成名为studentDao的对象)
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <!--该属性的类型是String,所有赋值应该使用value-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名,包名是dao接口所在的包名
            MapperScannerConfigurer会扫描这个包中的所有接口,把每个接口都执行
            一次getMapper()方法,得到每一个接口的dao对象
            创建好的dao对象放入到spring的容器中   (dao对象的默认名称是接口名的首字母小写:studentDao)
        -->
        <property name="basePackage" value="com.good.dao"/>
    </bean>



    <bean id="studentService" class="com.good.service.impl.StudentServiceImpl">
        <!--将上面生成的studentDao赋给此属性-->
        <property name="studentDao" ref="studentDao"/>
    </bean>
</beans>